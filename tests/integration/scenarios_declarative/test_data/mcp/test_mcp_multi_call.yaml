test_case_id: "mcp_multi_call_001"
description: "Tests an agent making two distinct calls to an MCP tool using indexed directives."

gateway_input:
  target_agent_name: "TestAgent"
  parts:
    - type: "text"
      text: "Get the user profile for 'user123' and then get their recent activity."

# The list of payloads the MCP server can return.
mcp_interactions:
  # Index 0: The user profile
  - content:
      - type: "text"
        text: '{"user_id": "user123", "name": "Alice", "role": "Admin"}'
  # Index 1: The user's activity
  - content:
      - type: "text"
        text: '{"activity": ["logged_in", "viewed_dashboard", "ran_report"]}'

# The sequence of mock LLM behaviors.
llm_interactions:
  # First LLM turn: decides to get the user profile.
  - static_response:
      choices:
        - message:
            role: "assistant"
            tool_calls:
              - id: "call_get_profile"
                type: "function"
                function:
                  name: "get_data_stdio"
                  arguments: '{"task_description": "Get user profile for user123. {{mcp_directives[0]}}"}'

  # Second LLM turn: receives the profile, then decides to get activity.
  - expected_request:
      expected_tool_responses_in_llm_messages:
        - tool_name: "get_data_stdio"
          response_json_matches:
            mcp_tool_output:
              content:
                - type: "text"
                  text: '{"user_id": "user123", "name": "Alice", "role": "Admin"}'
    static_response:
      choices:
        - message:
            role: "assistant"
            tool_calls:
              - id: "call_get_activity"
                type: "function"
                function:
                  name: "get_data_stdio"
                  arguments: '{"task_description": "Now get recent activity for user123. {{mcp_directives[1]}}"}'

  # Third LLM turn: receives activity, generates final response.
  - expected_request:
      expected_tool_responses_in_llm_messages:
        - tool_name: "get_data_stdio"
          response_json_matches:
            mcp_tool_output:
              content:
                - type: "text"
                  text: '{"activity": ["logged_in", "viewed_dashboard", "ran_report"]}'
    static_response:
      choices:
        - message:
            role: "assistant"
            content: "User Alice (Admin) has recent activity: logged_in, viewed_dashboard, ran_report."

expected_gateway_output:
  - type: "final_response"
    content_parts:
      - type: "text"
        text_exact: "User Alice (Admin) has recent activity: logged_in, viewed_dashboard, ran_report."
